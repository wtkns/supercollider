{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf230
{\fonttbl\f0\fswiss\fcharset77 ArialMT;\f1\fswiss\fcharset77 Arial-BoldMT;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue191;\red191\green0\blue0;\red96\green96\blue96;
\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f0\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs36 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs34 \cf0 (\
	\cf2 Server\cf0 .default = \cf2 Server\cf0 .internal;\
	s = \cf2 Server\cf0 .default;\
	s.boot;\
	s.scope(1);\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs32 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f1\b\fs66 \cf0 Gain Control and Manipulation
\f0\b0\fs32 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b\fs38 \cf3 // Sound Sources to play with
\f0\b0 \cf0 \
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/horn.aif"\cf0 );\
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/flute.aif"\cf0 );\
b= \cf2 Buffer\cf0 .read(s,\cf4 "sounds/OfraHaza1.aif"\cf0 );\
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/Beatles1.aif"\cf0 );\
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/Prince1.aif"\cf0 );\
\
\cf2 SynthDef\cf0 (\cf4 "PlayBuf"\cf0 ,\{ \cf2 arg\cf0  out=0,bufnum=0;\
	\cf2 Out\cf0 .ar(out,\
		\cf2 PlayBuf\cf0 .ar(1,bufnum,\cf2 BufRateScale\cf0 .kr(bufnum),loop: 1.0)\
	)\
\}).play(s,[\cf5 \\out\cf0 , 0, \cf5 \\bufnum\cf0 , b.bufnum]);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs32 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b\fs44 \cf3 // Waveform buffer allocated on the server.
\f0\b0 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs42 \cf3 // allocate buffer with server, size, numChans, bufferNumber\cf0 \
c = \cf2 Buffer\cf0 .alloc(s, 2048, 1, bufnum: 80);\
\cf3 // fill buffer with array of amplitudes, 3 * true (default)\cf0 \
c.sine1([1,0.5,0.33,0.25,0.2], \cf2 true\cf0 , \cf2 true\cf0 , \cf2 true\cf0 );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs32 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b\fs48 \cf0 Amplitude		amplitude follower\

\fs36 \
Amplitude.kr(input, attackTime, releaseTime, mul, add)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b0 \cf0 \
Tracks the peak amplitude of a signal.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b \cf0 input
\f0\b0  - input signal.\

\f1\b attackTime
\f0\b0  - 60dB convergence time for following attacks.\

\f1\b releaseTime
\f0\b0  - 60dB convergence time for following decays.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b\fs38 \cf3 // Sound Sources to play with
\f0\b0 \cf0 \
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/horn.aif"\cf0 );\
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/flute.aif"\cf0 );\
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/OfraHaza1.aif"\cf0 );\
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/Beatles1.aif"\cf0 );\
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/Prince1.aif"\cf0 );\
And,\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs42 \cf0 c.sine1([1,0.5,0.33,0.25,0.2], \cf2 true\cf0 , \cf2 true\cf0 , \cf2 true\cf0 );\
c.sine1(1.0/(1..12));\
c.sine1(1.0/(1..24));
\fs38 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs36 \cf0 \
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf4 "help-Amplitude"\cf0 ,\{ \cf2 arg\cf0  out=0, bufnum1=0, bufnum2= 1;\
	x = \cf2 PlayBuf\cf0 .ar(1,bufnum1,\cf2 BufRateScale\cf0 .kr(bufnum1),loop: 1.0);\
	y = \cf2 COsc\cf0 .ar(bufnum2, 200, 0.4, \cf2 Amplitude\cf0 .kr(x));\
	\cf2 Out\cf0 .ar(out,[x,y]);\
\}).play(s,[\cf5 \\out\cf0 , 0, \cf5 \\bufnum1\cf0 , b.bufnum, \cf5 \\bufnum2\cf0 , c.bufnum]);\
)\
\
( \cf3 // use attackTIme and releaseTimes to desynchronize\cf0 \
\cf2 SynthDef\cf0 (\cf4 "help-Amplitude"\cf0 ,\{ \cf2 arg\cf0  out=0, bufnum1=0, bufnum2= 1;\
	x = \cf2 PlayBuf\cf0 .ar(1,bufnum1,\cf2 BufRateScale\cf0 .kr(bufnum1),loop: 1.0);\
	y = \cf2 COsc\cf0 .ar(bufnum2, 200, 0.4, \cf2 Amplitude\cf0 .kr(x,0.5,0.5));\
	\cf2 Out\cf0 .ar(out,[x,y]);\
\}).play(s,[\cf5 \\out\cf0 , 0, \cf5 \\bufnum1\cf0 , b.bufnum, \cf5 \\bufnum2\cf0 , c.bufnum]);\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs32 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b\fs50 \cf0 Balance -    				balances two signals with each other (JoshLib)\
\

\fs38 Balance(in, test, numperiods, mul, add)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs42 \cf0 \ul \ulc0 Usage
\fs38 \ulnone \
\
in - the signal you want to balance\
test - the signal that should be used to balance in\
numperiods - the number of control periods to average over.  Defaults to 4. This value is initialized at starttime\
\
Balance will try to match the RMS levels of in to the RMS of test\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // Sound Sources to play with
\f0\b0 \cf0 \
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/horn.aif"\cf0 );\
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/flute.aif"\cf0 );\
b= \cf2 Buffer\cf0 .read(s,\cf4 "sounds/OfraHaza1.aif"\cf0 );\
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/Beatles1.aif"\cf0 );\
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/Prince1.aif"\cf0 );\
And,\
c = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/horn.aif"\cf0 );\
c = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/flute.aif"\cf0 );\
c= \cf2 Buffer\cf0 .read(s,\cf4 "sounds/OfraHaza1.aif"\cf0 );\
c = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/Beatles1.aif"\cf0 );\
c = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/Prince1.aif"\cf0 );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b0\fs36 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf4 "help-Amplitude"\cf0 ,\{ \cf2 arg\cf0  out=0, bufnum1=0, bufnum2= 1;\
	x = \cf2 PlayBuf\cf0 .ar(1,bufnum1,\cf2 BufRateScale\cf0 .kr(bufnum1),loop: 1.0);\
	y = \cf2 COsc\cf0 .ar(bufnum2, 200, 0.4, \cf2 0.3\cf0 );\
	z = Balance.ar(x,y,4);\
	\cf2 Out\cf0 .ar(out,[x,z]);\
\}).play(s,[\cf5 \\out\cf0 , 0, \cf5 \\bufnum1\cf0 , b.bufnum, \cf5 \\bufnum2\cf0 , c.bufnum]);\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs32 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b\fs50 \cf0 Normalizer				flattens dynamics\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs38 \cf0 \
Normalizer.ar(input, level, lookAheadTime)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b0 \cf0 \
Normalizes the input amplitude to the given level. Normalize will not overshoot\
like Compander will, but it needs to look ahead in the audio. Thus there is a \
delay equal to twice the lookAheadTime.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b \cf0 input
\f0\b0  - the signal to be processed.\

\f1\b level
\f0\b0  - the peak output amplitude level to which to normalize the input.\

\f1\b lookAheadTime
\f0\b0  - the buffer delay time. Shorter times will produce smaller delays\
and quicker transient response times, but may introduce amplitude modulation artifacts.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b \cf3 // Sound Sources to play with
\f0\b0 \cf0 \
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/horn.aif"\cf0 );\
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/flute.aif"\cf0 );\
b= \cf2 Buffer\cf0 .read(s,\cf4 "sounds/OfraHaza1.aif"\cf0 );\
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/Beatles1.aif"\cf0 );\
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/Prince1.aif"\cf0 );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs36 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf4 "help-Amplitude"\cf0 ,\{ \cf2 arg\cf0  out=0, bufnum1=0;\
	x = \cf2 PlayBuf\cf0 .ar(1,bufnum1,\cf2 BufRateScale\cf0 .kr(bufnum1),loop: 1.0);\
	y = \cf2 Normalizer.ar(x, 0.4, 0.01);\cf0 \
	\cf2 Out\cf0 .ar(out,[x,y]);\
\}).play(s,[\cf5 \\out\cf0 , 0, \cf5 \\bufnum1\cf0 , b.bufnum]);\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\fs32 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b\fs50 \cf0 \
Limiter				peak limiter\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs38 \cf0 \
Limiter.ar(input, level, lookAheadTime)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b0 \cf0 \
Limits the input amplitude to the given level. Limiter will not overshoot\
like Compander will, but it needs to look ahead in the audio. Thus there is a \
delay equal to twice the lookAheadTime.\
Limiter, unlike Compander, is completely transparent for an in range signal.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b \cf0 input
\f0\b0  - the signal to be processed.\

\f1\b level
\f0\b0  - the peak output amplitude level to which to normalize the input.\

\f1\b lookAheadTime
\f0\b0  - the buffer delay time. Shorter times will produce smaller delays\
and quicker transient response times, but may introduce amplitude modulation artifacts.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b \cf3 // Sound Sources to play with
\f0\b0 \cf0 \
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/horn.aif"\cf0 );\
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/flute.aif"\cf0 );\
b= \cf2 Buffer\cf0 .read(s,\cf4 "sounds/OfraHaza1.aif"\cf0 );\
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/Beatles1.aif"\cf0 );\
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/Prince1.aif"\cf0 );\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs36 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 SynthDef\cf0 (\cf4 "help-Amplitude"\cf0 ,\{ \cf2 arg\cf0  out=0, bufnum1=0;\
	var amp;\
	x = \cf2 PlayBuf\cf0 .ar(1,bufnum1,\cf2 BufRateScale\cf0 .kr(bufnum1),loop: 1.0);\
	amp = MouseX.kr(0.5,3.0);\
	y = \cf2 Limiter.ar(amp*x, 0.5, 0.01);\cf0 \
	\cf2 Out\cf0 .ar(out,[x,y]);\
\}).play(s,[\cf5 \\out\cf0 , 0, \cf5 \\bufnum1\cf0 , b.bufnum]);\
)\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b\fs50 \cf0 \
Compander		compressor, expander, limiter, gate, ducker\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs38 \cf0 \
Compander.ar(input, control, threshold, slopeBelow, slopeAbove, \
				clampTime, relaxTime, mul, add)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b0 \cf0 \
General purpose dynamics processor. \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs32 \cf0 \
(\cf3 // example signal to process\cf0 \
(\{\
	\cf2 var\cf0  z;\
	z = \cf2 Decay2\cf0 .ar(\
		\cf2 Impulse\cf0 .ar(8, 0, \cf2 LFSaw\cf0 .kr(0.3, 0, -1,1)), \
			0.001, 0.3, \cf2 Pulse\cf0 .ar(80, 0.3));\
\}).scope)\
\
(\cf3 // compressor/limiter  with MouseX as threshold and MouseY as Compression Ratio\cf0 \
(\{\
	\cf2 var\cf0  z, threshold, ratio, bias;\
	z = \cf2 Decay2\cf0 .ar(\
		\cf2 Impulse\cf0 .ar(8, 0, \cf2 LFSaw\cf0 .kr(0.3, 0, -1,1)), \
			0.001, 0.3, \cf2 Pulse\cf0 .ar(80, 0.3));\
	threshold = \cf2 MouseX\cf0 .kr(0.1, 0.9);\
	ratio = MouseY.kr(1,0.05);\
	bias = 0.8 / (threshold + (ratio*(1.0-threshold)));\
	\cf2 Compander\cf0 .ar(z, z, \cf2 threshold\cf0 , 1, ratio, 0.01, 0.01, bias);\
\}).scope)\
\
(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // sustainer\cf0 \
play(\{\
	\cf2 var\cf0  z;\
	z = \cf2 Decay2\cf0 .ar(\
		\cf2 Impulse\cf0 .ar(8, 0,\cf2 LFSaw\cf0 .kr(0.3, 0, -0.3, 0.3)), \
		0.001, 0.3, \cf2 Mix\cf0 .ar(\cf2 Pulse\cf0 .ar([80,81], 0.3)));\
	\cf2 Compander\cf0 .ar(z, z, \cf2 MouseX\cf0 .kr(0.1, 1), MouseY.kr(1,0.05), 1, 0.01, 0.01);\
\}).scope)\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b \cf3 // Sound Sources to play with
\f0\b0 \cf0 \
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/horn.aif"\cf0 );\
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/flute.aif"\cf0 );\
b= \cf2 Buffer\cf0 .read(s,\cf4 "sounds/OfraHaza1.aif"\cf0 );\
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/Beatles1.aif"\cf0 );\
b = \cf2 Buffer\cf0 .read(s,\cf4 "sounds/Prince1.aif"\cf0 );\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 (\{Out\cf0 .ar(0, \cf2 PlayBuf\cf0 .ar(1,b.bufnum,\cf2 BufRateScale\cf0 .kr(b.bufnum),loop: 1.0))\}.scope;)\
\
\
(\cf3 // compressor/limiter  with MouseX as threshold and MouseY as Compression Ratio\cf0 \
(\{\
	\cf2 var\cf0  z, threshold, ratio, bias;\
	z = \cf2 PlayBuf\cf0 .ar(1,b.bufnum,\cf2 BufRateScale\cf0 .kr(b.bufnum),loop: 1.0);\
	threshold = \cf2 MouseX\cf0 .kr(0.1, 0.9);\
	ratio = MouseY.kr(1,0.05);\
	bias = 0.8 / (threshold + (ratio*(1.0-threshold)));\
	\cf2 Compander\cf0 .ar(z, z, \cf2 threshold\cf0 , 1, ratio, 0.01, 0.01, bias);\
\}).scope)\
\
(\cf3 // same with longer rise and decay times\cf0 \
(\{\
	\cf2 var\cf0  z, threshold, ratio, bias;\
	z = \cf2 PlayBuf\cf0 .ar(1,b.bufnum,\cf2 BufRateScale\cf0 .kr(b.bufnum),loop: 1.0);\
	threshold = \cf2 MouseX\cf0 .kr(0.1, 0.9);\
	ratio = MouseY.kr(1,0.05);\
	bias = 0.8 / (threshold + (ratio*(1.0-threshold)));\
	\cf2 Compander\cf0 .ar(z, z, \cf2 threshold\cf0 , 1, ratio, 0.5, 0.9, bias);\
\}).scope)\
\
\
}