{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf230
{\fonttbl\f0\fnil\fcharset0 Candara;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue191;\red191\green0\blue0;
\red96\green96\blue96;\red0\green115\blue0;\red0\green0\blue191;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs48 \cf2 (\
\cf3 var\cf2  variation = 1680;\
\cf3 var\cf2  piecelength = 20;\
\
\cf3 var\cf2  isEven = \{\cf3 arg\cf2  n;\
	(n%2==0);\
\};\
\
\cf3 var\cf2  getDur = \{\cf3 arg\cf2  dur;\
	(dur / (variation / piecelength));\
\};\
\
\cf3 var\cf2  getPrimes = \{ \cf3 arg\cf2  n;\
	\cf3 var\cf2  p = \cf3 Array\cf2 .series(n, 2, 1); \cf4 // fill array p with [2 through n]\cf2 \
	\cf3 var\cf2  tempPrimes = \cf3 Array\cf2 .new();\
	while ( \{ p.size > 0 \}, \{ \
		x = p[0];\
		tempPrimes = tempPrimes.add(x);\
		p.removeAllSuchThat(\{ \cf3 arg\cf2  item, i; item % x == 0 \});\
	 \});\
	tempPrimes\
\};\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\fs44 \cf3 var\cf2  getFactors = \{ \cf3 arg\cf2  n;\
	\cf3 var\cf2  factors;\
	if(n.even)\
		\{forBy (2, sqrt(n), 2, \
		  	\{ \cf3 arg\cf2  i; \
			  	if (n%i==0 && isEven.value(n/i))\
			  	\{factors = factors.add([i,n/i])\}\
			\});				\
		\}\{ \cf5 "the number is odd"\cf2 \};\
factors\};
\fs48 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf3 var\cf2  getGoldbach = \{ \cf3 arg\cf2  n;\
	\cf3 var\cf2  testPrimes = getPrimes.value(n);\
	\cf3 var\cf2  results = \cf3 Array\cf2 .new();\
	for (0, testPrimes.size-1, \{\cf3 arg\cf2  i;\
		if (testPrimes.includes(n-testPrimes[i]),\
			\{results = results.add([testPrimes[i], n-testPrimes[i]])\}\
		);\
	\});\
	results\
\};	\
\
\cf3 Server\cf2 .default = s = \cf3 Server\cf2 .internal.boot;\
s.scope;\
\
s.waitForBoot(\{\
		\cf3 var\cf2  data, routine, sd;\
		\
		sd = \cf3 CtkSynthDef\cf2 (\cf6 \\note\cf2 , \{\cf3 arg\cf2  freq, amp, dur;\
			\cf3 var\cf2  env;\
			env = \cf3 EnvGen\cf2 .kr(\
				\cf3 Env\cf2 ([0, 1, 1, 0], [0.1, 0.8, 0.1], \cf6 \\sin\cf2 ), \
				timeScale: dur);\
			\cf3 Out\cf2 .ar(0, \cf3 Pan2\cf2 .ar(\
				\cf3 SinOsc\cf2 .ar(freq, 0, amp) * env\
				)\
			)\
		\});\
		\
		routine = \cf3 Routine\cf2 (\{\cf3 arg\cf2  fundamental, time;\
			\cf3 var\cf2  partitions = getGoldbach.(fundamental);\
\cf0 			"hello".post; \
			time.postln;\cf2 \
			partitions.do(\{\cf3 arg\cf2  thisData, i;\
				\cf3 var\cf2  freq, dur;\
				#freq, dur = thisData;\
\
				dur = getDur.value(dur);\
				sd.note(0.2, dur).freq_(freq).dur_(dur).amp_(0.3).play;\
			\})\
		\});\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\fs44 \cf0 	\cf7 Routine\cf0 .run(\{
\fs48 \cf2 		\
		var factors = getFactors.value(variation);\
		routine.value(variation);\
	\})	\
\
\}) \cf4 // end wait for boot	\cf2 \
)}